2020-03-01 at 10:52:22 | INFO | pyAPIStart Up ....
2020-03-01 at 10:52:22 | INFO | Api prefix is: [ /api/v2 ]
2020-03-01 at 10:52:22 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 10:54:25 | INFO | pyAPIStart Up ....
2020-03-01 at 10:54:25 | INFO | Api prefix is: [ /api/v2 ]
2020-03-01 at 10:54:25 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 10:54:27 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 10:54:27 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 10:54:27 | DEBUG | metadata exists ....
2020-03-01 at 10:54:30 | DEBUG | Read Schema: [ test ]
2020-03-01 at 10:54:42 | INFO | pyAPIStart Up ....
2020-03-01 at 10:54:42 | INFO | Api prefix is: [ /api/v2 ]
2020-03-01 at 10:54:43 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 10:54:45 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 10:54:45 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 10:54:45 | DEBUG | metadata exists ....
2020-03-01 at 10:54:47 | DEBUG | Read Schema: [ test ]
2020-03-01 at 10:58:22 | INFO | pyAPIStart Up ....
2020-03-01 at 10:58:22 | INFO | Api prefix is: [ /api/v2 ]
2020-03-01 at 10:58:22 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 10:58:26 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 10:58:26 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 10:58:26 | DEBUG | metadata exists ....
2020-03-01 at 10:58:28 | DEBUG | Read Schema: [ test ]
2020-03-01 at 10:58:53 | DEBUG | Access '/token' : run in login_for_access_token(), input data username: [zhangjun] and password: [passw0rd]
2020-03-01 at 10:58:53 | DEBUG | authenticate_user with username: [zhangjun] and password: [passw0rd]
2020-03-01 at 10:58:53 | DEBUG | verify_password with hashed_password: [$2b$12$bBi.x9FJ/RkRTNH8NSLu9eiNZpgpobZLb4Jj3Zug2GUiiFisft5iC]
2020-03-01 at 10:58:53 | DEBUG | create_access_token with encoded_jwt: [b'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ6aGFuZ2p1biIsImV4cCI6MTU4MzAzMzMzM30.477gjxc5iil_k1iWM4vjWCVomHvfhhYZbKI1wt_X5R4']
2020-03-01 at 10:58:58 | DEBUG | Access '/_schema' : run in get_schema()
2020-03-01 at 10:59:26 | DEBUG | Access '/_table/{table_name}' : run in get_data(), input data table_name: [bank_dist]
2020-03-01 at 10:59:26 | DEBUG | fieldlist: [*]
2020-03-01 at 10:59:26 | DEBUG | filter: [age=:age]
2020-03-01 at 10:59:26 | DEBUG | filterparam: [{'age':59}]
2020-03-01 at 10:59:26 | DEBUG | limit: [20]
2020-03-01 at 10:59:26 | DEBUG | offset: [0]
2020-03-01 at 10:59:26 | DEBUG | order: [None]
2020-03-01 at 10:59:26 | DEBUG | group: [None]
2020-03-01 at 10:59:26 | DEBUG | count_only: [False]
2020-03-01 at 10:59:26 | DEBUG | include_count: [False]
2020-03-01 at 10:59:26 | DEBUG | query_table():
2020-03-01 at 10:59:26 | DEBUG | tablename: bank_dist
2020-03-01 at 10:59:26 | DEBUG | fieldlist: *
2020-03-01 at 10:59:26 | DEBUG | filter: age=:age
2020-03-01 at 10:59:26 | DEBUG | limit: 20
2020-03-01 at 10:59:26 | DEBUG | offset: 0
2020-03-01 at 10:59:26 | DEBUG | order: None
2020-03-01 at 10:59:26 | DEBUG | group: None
2020-03-01 at 10:59:26 | DEBUG | count_only: False
2020-03-01 at 10:59:26 | DEBUG | include_count: False
2020-03-01 at 10:59:26 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 10:59:26 | DEBUG | metadata exists ....
2020-03-01 at 10:59:26 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 10:59:26 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist
 LIMIT %(param_1)s OFFSET %(param_2)s ]
2020-03-01 at 10:59:26 | DEBUG | SQL of Count: [ SELECT count() AS col_count 
FROM bank_dist ]
2020-03-01 at 10:59:27 | DEBUG | SQL of Query Full : [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s OFFSET %(param_2)s ]
2020-03-01 at 10:59:27 | DEBUG | SQL of Count Full : [ SELECT count() AS col_count 
FROM bank_dist 
WHERE age=%(age)s ]
2020-03-01 at 10:59:27 | DEBUG | Select Count Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001AC89B0EB50> ]
2020-03-01 at 10:59:27 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001AC89BF29A0> ]
2020-03-01 at 10:59:49 | DEBUG | Access '/_table/{table_name}/{id}' : run in get_data_by_id(), input data table_name: [bank_dist]
2020-03-01 at 10:59:49 | DEBUG | fieldlist: [*]
2020-03-01 at 10:59:49 | DEBUG | idfield: [bank_dist]
2020-03-01 at 10:59:49 | DEBUG | query_table_byid():
2020-03-01 at 10:59:49 | DEBUG | tablename: bank_dist
2020-03-01 at 10:59:49 | DEBUG | tbid: 59
2020-03-01 at 10:59:49 | DEBUG | fieldlist: *
2020-03-01 at 10:59:49 | DEBUG | idfiled: bank_dist
2020-03-01 at 10:59:49 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 10:59:49 | DEBUG | metadata exists ....
2020-03-01 at 10:59:49 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 10:59:49 | DEBUG | Primarykey select string : [ bank_dist=:bank_dist ]
2020-03-01 at 10:59:49 | DEBUG | Primarykey select param : [ {'bank_dist': '59'} ]
2020-03-01 at 10:59:49 | ERROR | Exception at crud.query query_table_byid(): 
2020-03-01 at 11:08:22 | DEBUG | query_table():
2020-03-01 at 11:08:22 | DEBUG | tablename: test
2020-03-01 at 11:08:22 | DEBUG | fieldlist: *
2020-03-01 at 11:08:22 | DEBUG | filter: id=:id and name=:name
2020-03-01 at 11:08:22 | DEBUG | limit: 10
2020-03-01 at 11:08:22 | DEBUG | offset: 0
2020-03-01 at 11:08:22 | DEBUG | order: name desc
2020-03-01 at 11:08:22 | DEBUG | group: name
2020-03-01 at 11:08:22 | DEBUG | count_only: False
2020-03-01 at 11:08:22 | DEBUG | include_count: True
2020-03-01 at 11:08:22 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:08:28 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:08:28 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:08:28 | DEBUG | metadata exists ....
2020-03-01 at 11:08:31 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:08:37 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:08:37 | DEBUG | metadata exists ....
2020-03-01 at 11:08:37 | ERROR | Exception at crud.query query_table(): 
2020-03-01 at 11:08:58 | DEBUG | query_table_byid():
2020-03-01 at 11:08:58 | DEBUG | tablename: bank_dist
2020-03-01 at 11:08:58 | DEBUG | tbid: 59
2020-03-01 at 11:08:58 | DEBUG | fieldlist: None
2020-03-01 at 11:08:59 | DEBUG | idfiled: age
2020-03-01 at 11:08:59 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:09:01 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:09:01 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:09:01 | DEBUG | metadata exists ....
2020-03-01 at 11:09:04 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:09:05 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:09:05 | DEBUG | metadata exists ....
2020-03-01 at 11:09:05 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:09:05 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:09:05 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:09:05 | ERROR | Exception at crud.query query_table_byid(): 
2020-03-01 at 11:09:36 | DEBUG | query_table_byid():
2020-03-01 at 11:09:36 | DEBUG | tablename: bank_dist
2020-03-01 at 11:09:36 | DEBUG | tbid: 59
2020-03-01 at 11:09:36 | DEBUG | fieldlist: None
2020-03-01 at 11:09:36 | DEBUG | idfiled: age
2020-03-01 at 11:09:36 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:09:39 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:09:39 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:09:39 | DEBUG | metadata exists ....
2020-03-01 at 11:09:41 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:09:43 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:09:43 | DEBUG | metadata exists ....
2020-03-01 at 11:09:43 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:09:43 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:09:43 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:09:43 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:10:54 | DEBUG | query_table_byid():
2020-03-01 at 11:10:54 | DEBUG | tablename: bank_dist
2020-03-01 at 11:10:54 | DEBUG | tbid: 59
2020-03-01 at 11:10:54 | DEBUG | fieldlist: None
2020-03-01 at 11:10:54 | DEBUG | idfiled: age
2020-03-01 at 11:10:54 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:10:58 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:10:58 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:10:58 | DEBUG | metadata exists ....
2020-03-01 at 11:11:02 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:11:03 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:11:03 | DEBUG | metadata exists ....
2020-03-01 at 11:11:03 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:11:03 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:11:03 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:11:03 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:14:42 | DEBUG | query_table_byid():
2020-03-01 at 11:14:42 | DEBUG | tablename: bank_dist
2020-03-01 at 11:14:42 | DEBUG | tbid: 59
2020-03-01 at 11:14:42 | DEBUG | fieldlist: None
2020-03-01 at 11:14:42 | DEBUG | idfiled: age
2020-03-01 at 11:14:42 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:14:45 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:14:45 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:14:45 | DEBUG | metadata exists ....
2020-03-01 at 11:14:46 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:14:48 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:14:48 | DEBUG | metadata exists ....
2020-03-01 at 11:14:48 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:14:48 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:14:48 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:14:48 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:15:15 | DEBUG | query_table_byid():
2020-03-01 at 11:15:15 | DEBUG | tablename: bank_dist
2020-03-01 at 11:15:15 | DEBUG | tbid: 59
2020-03-01 at 11:15:15 | DEBUG | fieldlist: None
2020-03-01 at 11:15:15 | DEBUG | idfiled: age
2020-03-01 at 11:15:15 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:15:20 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:15:20 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:15:20 | DEBUG | metadata exists ....
2020-03-01 at 11:15:22 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:15:24 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:15:24 | DEBUG | metadata exists ....
2020-03-01 at 11:15:24 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:15:24 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:15:24 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:15:24 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:19:49 | DEBUG | query_table_byid():
2020-03-01 at 11:19:49 | DEBUG | tablename: bank_dist
2020-03-01 at 11:19:49 | DEBUG | tbid: 59
2020-03-01 at 11:19:49 | DEBUG | fieldlist: None
2020-03-01 at 11:19:49 | DEBUG | idfiled: age
2020-03-01 at 11:19:49 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:19:52 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:19:52 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:19:52 | DEBUG | metadata exists ....
2020-03-01 at 11:19:54 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:19:57 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:19:57 | DEBUG | metadata exists ....
2020-03-01 at 11:19:57 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:19:57 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:19:57 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 11:19:57 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 11:19:57 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001D11A55DA60> ]
2020-03-01 at 11:25:12 | DEBUG | query_table_byid():
2020-03-01 at 11:25:12 | DEBUG | tablename: bank_dist
2020-03-01 at 11:25:12 | DEBUG | tbid: 59
2020-03-01 at 11:25:12 | DEBUG | fieldlist: None
2020-03-01 at 11:25:12 | DEBUG | idfiled: age
2020-03-01 at 11:25:12 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:25:16 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:25:16 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:25:16 | DEBUG | metadata exists ....
2020-03-01 at 11:25:17 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:25:19 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:25:19 | DEBUG | metadata exists ....
2020-03-01 at 11:25:19 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:25:19 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:25:19 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:25:19 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:26:55 | DEBUG | query_table_byid():
2020-03-01 at 11:26:55 | DEBUG | tablename: bank_dist
2020-03-01 at 11:26:55 | DEBUG | tbid: 59
2020-03-01 at 11:26:55 | DEBUG | fieldlist: None
2020-03-01 at 11:26:55 | DEBUG | idfiled: age
2020-03-01 at 11:26:55 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:27:01 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:27:01 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:27:01 | DEBUG | metadata exists ....
2020-03-01 at 11:27:04 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:27:12 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:27:12 | DEBUG | metadata exists ....
2020-03-01 at 11:27:12 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:27:12 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:27:12 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:27:12 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:29:40 | DEBUG | query_table_byid():
2020-03-01 at 11:29:40 | DEBUG | tablename: bank_dist
2020-03-01 at 11:29:40 | DEBUG | tbid: 59
2020-03-01 at 11:29:40 | DEBUG | fieldlist: None
2020-03-01 at 11:29:40 | DEBUG | idfiled: age
2020-03-01 at 11:29:40 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:29:43 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:29:43 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:29:43 | DEBUG | metadata exists ....
2020-03-01 at 11:29:46 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:29:47 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:29:47 | DEBUG | metadata exists ....
2020-03-01 at 11:29:47 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:29:47 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:29:47 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:29:47 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:35:54 | DEBUG | query_table_byid():
2020-03-01 at 11:35:54 | DEBUG | tablename: bank_dist
2020-03-01 at 11:35:54 | DEBUG | tbid: 59
2020-03-01 at 11:35:54 | DEBUG | fieldlist: None
2020-03-01 at 11:35:54 | DEBUG | idfiled: age
2020-03-01 at 11:35:54 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:35:58 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:35:58 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:35:58 | DEBUG | metadata exists ....
2020-03-01 at 11:36:00 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:36:03 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:36:03 | DEBUG | metadata exists ....
2020-03-01 at 11:36:03 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:36:03 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:36:03 | ERROR | Exception at crud.query query_table_byid(): too many values to unpack (expected 2) 
2020-03-01 at 11:36:57 | DEBUG | query_table_byid():
2020-03-01 at 11:36:57 | DEBUG | tablename: bank_dist
2020-03-01 at 11:36:57 | DEBUG | tbid: 59
2020-03-01 at 11:36:57 | DEBUG | fieldlist: None
2020-03-01 at 11:36:57 | DEBUG | idfiled: age
2020-03-01 at 11:36:57 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:36:58 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:36:58 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:36:58 | DEBUG | metadata exists ....
2020-03-01 at 11:37:00 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:37:01 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:37:01 | DEBUG | metadata exists ....
2020-03-01 at 11:37:01 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:37:01 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:37:01 | ERROR | Exception at crud.query query_table_byid(): too many values to unpack (expected 2) 
2020-03-01 at 11:37:15 | DEBUG | query_table_byid():
2020-03-01 at 11:37:15 | DEBUG | tablename: bank_dist
2020-03-01 at 11:37:15 | DEBUG | tbid: 59
2020-03-01 at 11:37:15 | DEBUG | fieldlist: None
2020-03-01 at 11:37:15 | DEBUG | idfiled: age
2020-03-01 at 11:37:15 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:37:18 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:37:18 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:37:18 | DEBUG | metadata exists ....
2020-03-01 at 11:37:21 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:37:22 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:37:22 | DEBUG | metadata exists ....
2020-03-01 at 11:37:22 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:37:22 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:37:22 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:37:22 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:37:43 | DEBUG | query_table_byid():
2020-03-01 at 11:37:43 | DEBUG | tablename: bank_dist
2020-03-01 at 11:37:43 | DEBUG | tbid: 59
2020-03-01 at 11:37:43 | DEBUG | fieldlist: None
2020-03-01 at 11:37:43 | DEBUG | idfiled: age
2020-03-01 at 11:37:43 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:37:47 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:37:47 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:37:47 | DEBUG | metadata exists ....
2020-03-01 at 11:37:51 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:37:53 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:37:53 | DEBUG | metadata exists ....
2020-03-01 at 11:37:53 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:37:53 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:37:53 | ERROR | Exception at crud.query query_table_byid(): too many values to unpack (expected 2) 
2020-03-01 at 11:38:12 | DEBUG | query_table_byid():
2020-03-01 at 11:38:12 | DEBUG | tablename: bank_dist
2020-03-01 at 11:38:12 | DEBUG | tbid: 59
2020-03-01 at 11:38:12 | DEBUG | fieldlist: None
2020-03-01 at 11:38:12 | DEBUG | idfiled: age
2020-03-01 at 11:38:12 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:38:16 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:38:16 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:38:16 | DEBUG | metadata exists ....
2020-03-01 at 11:38:18 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:38:21 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:38:21 | DEBUG | metadata exists ....
2020-03-01 at 11:38:21 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:38:21 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:38:21 | ERROR | Exception at crud.query query_table_byid(): too many values to unpack (expected 2) 
2020-03-01 at 11:39:24 | DEBUG | query_table_byid():
2020-03-01 at 11:39:24 | DEBUG | tablename: bank_dist
2020-03-01 at 11:39:24 | DEBUG | tbid: 59
2020-03-01 at 11:39:24 | DEBUG | fieldlist: None
2020-03-01 at 11:39:24 | DEBUG | idfiled: age
2020-03-01 at 11:39:24 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:39:27 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:39:27 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:39:27 | DEBUG | metadata exists ....
2020-03-01 at 11:39:31 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:39:32 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:39:32 | DEBUG | metadata exists ....
2020-03-01 at 11:39:32 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:39:32 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:39:32 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 11:39:32 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 11:39:35 | DEBUG | query_table_byid():
2020-03-01 at 11:39:35 | DEBUG | tablename: bank_dist
2020-03-01 at 11:39:35 | DEBUG | tbid: 59
2020-03-01 at 11:39:35 | DEBUG | fieldlist: None
2020-03-01 at 11:39:35 | DEBUG | idfiled: age
2020-03-01 at 11:39:35 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:39:47 | ERROR | Exception at crud.query query_table_byid(): ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response')) 
2020-03-01 at 11:41:58 | DEBUG | query_table_byid():
2020-03-01 at 11:41:58 | DEBUG | tablename: bank_dist
2020-03-01 at 11:41:58 | DEBUG | tbid: 59
2020-03-01 at 11:41:58 | DEBUG | fieldlist: None
2020-03-01 at 11:41:58 | DEBUG | idfiled: age
2020-03-01 at 11:41:58 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:42:04 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:42:04 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:42:04 | DEBUG | metadata exists ....
2020-03-01 at 11:42:06 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:42:08 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:42:08 | DEBUG | metadata exists ....
2020-03-01 at 11:42:08 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:42:08 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:42:08 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 11:42:09 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 11:42:09 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000023FE914B8E0> ]
2020-03-01 at 11:43:54 | DEBUG | query_table_byid():
2020-03-01 at 11:43:54 | DEBUG | tablename: bank_dist
2020-03-01 at 11:43:54 | DEBUG | tbid: 59
2020-03-01 at 11:43:54 | DEBUG | fieldlist: None
2020-03-01 at 11:43:54 | DEBUG | idfiled: age
2020-03-01 at 11:43:54 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:43:57 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:43:57 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:43:57 | DEBUG | metadata exists ....
2020-03-01 at 11:44:01 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:44:02 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:44:02 | DEBUG | metadata exists ....
2020-03-01 at 11:44:02 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:44:02 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:44:02 | ERROR | Exception at crud.query query_table_byid(): too many values to unpack (expected 2) 
2020-03-01 at 11:44:58 | DEBUG | query_table_byid():
2020-03-01 at 11:44:58 | DEBUG | tablename: bank_dist
2020-03-01 at 11:44:58 | DEBUG | tbid: 59
2020-03-01 at 11:44:58 | DEBUG | fieldlist: None
2020-03-01 at 11:44:58 | DEBUG | idfiled: age
2020-03-01 at 11:44:58 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:45:01 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:45:01 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:45:01 | DEBUG | metadata exists ....
2020-03-01 at 11:45:03 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:45:04 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:45:04 | DEBUG | metadata exists ....
2020-03-01 at 11:45:04 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:45:04 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:45:04 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 11:45:06 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 11:45:06 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001BCF09E9250> ]
2020-03-01 at 11:58:29 | DEBUG | query_table_byid():
2020-03-01 at 11:58:29 | DEBUG | tablename: bank_dist
2020-03-01 at 11:58:29 | DEBUG | tbid: 59
2020-03-01 at 11:58:29 | DEBUG | fieldlist: None
2020-03-01 at 11:58:29 | DEBUG | idfiled: age
2020-03-01 at 11:58:29 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 11:58:32 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 11:58:32 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:58:32 | DEBUG | metadata exists ....
2020-03-01 at 11:58:33 | DEBUG | Read Schema: [ test ]
2020-03-01 at 11:58:40 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 11:58:40 | DEBUG | metadata exists ....
2020-03-01 at 11:58:40 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 11:58:40 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 11:58:40 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 11:58:40 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 11:58:40 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000296F1A869D0> ]
2020-03-01 at 12:00:12 | DEBUG | query_table_byid():
2020-03-01 at 12:00:12 | DEBUG | tablename: bank_dist
2020-03-01 at 12:00:12 | DEBUG | tbid: 59
2020-03-01 at 12:00:12 | DEBUG | fieldlist: None
2020-03-01 at 12:00:12 | DEBUG | idfiled: age
2020-03-01 at 12:00:12 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:00:18 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:00:18 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:00:18 | DEBUG | metadata exists ....
2020-03-01 at 12:00:22 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:00:23 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:00:23 | DEBUG | metadata exists ....
2020-03-01 at 12:00:23 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:00:23 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:00:23 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:00:23 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:00:23 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001FEBD7C6B50> ]
2020-03-01 at 12:00:38 | DEBUG | query_table_byid():
2020-03-01 at 12:00:38 | DEBUG | tablename: bank_dist
2020-03-01 at 12:00:38 | DEBUG | tbid: 59
2020-03-01 at 12:00:38 | DEBUG | fieldlist: None
2020-03-01 at 12:00:38 | DEBUG | idfiled: age
2020-03-01 at 12:00:38 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:00:44 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:00:44 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:00:44 | DEBUG | metadata exists ....
2020-03-01 at 12:00:48 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:00:52 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:00:52 | DEBUG | metadata exists ....
2020-03-01 at 12:00:52 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:00:52 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:00:52 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:00:53 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:00:53 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000239260D6B20> ]
2020-03-01 at 12:02:53 | DEBUG | query_table_byid():
2020-03-01 at 12:02:53 | DEBUG | tablename: bank_dist
2020-03-01 at 12:02:53 | DEBUG | tbid: 59
2020-03-01 at 12:02:53 | DEBUG | fieldlist: None
2020-03-01 at 12:02:53 | DEBUG | idfiled: age
2020-03-01 at 12:02:53 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:02:58 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:02:58 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:02:58 | DEBUG | metadata exists ....
2020-03-01 at 12:03:00 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:03:04 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:03:04 | DEBUG | metadata exists ....
2020-03-01 at 12:03:04 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:03:04 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:03:04 | ERROR | Exception at crud.query query_table_byid(): 'INTEGER' object is not callable 
2020-03-01 at 12:04:22 | DEBUG | query_table_byid():
2020-03-01 at 12:04:22 | DEBUG | tablename: bank_dist
2020-03-01 at 12:04:22 | DEBUG | tbid: 59
2020-03-01 at 12:04:22 | DEBUG | fieldlist: None
2020-03-01 at 12:04:22 | DEBUG | idfiled: age
2020-03-01 at 12:04:22 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:04:27 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:04:27 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:04:27 | DEBUG | metadata exists ....
2020-03-01 at 12:04:29 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:04:33 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:04:33 | DEBUG | metadata exists ....
2020-03-01 at 12:04:33 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:04:33 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:04:33 | ERROR | Exception at crud.query query_table_byid(): 'int' object has no attribute 'astype' 
2020-03-01 at 12:05:08 | DEBUG | query_table_byid():
2020-03-01 at 12:05:08 | DEBUG | tablename: bank_dist
2020-03-01 at 12:05:08 | DEBUG | tbid: 59
2020-03-01 at 12:05:08 | DEBUG | fieldlist: None
2020-03-01 at 12:05:08 | DEBUG | idfiled: age
2020-03-01 at 12:05:08 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:05:17 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:05:17 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:05:17 | DEBUG | metadata exists ....
2020-03-01 at 12:05:21 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:05:24 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:05:24 | DEBUG | metadata exists ....
2020-03-01 at 12:05:24 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:05:24 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:05:24 | ERROR | Exception at crud.query query_table_byid(): 'int' object has no attribute 'astype' 
2020-03-01 at 12:06:38 | DEBUG | query_table_byid():
2020-03-01 at 12:06:38 | DEBUG | tablename: bank_dist
2020-03-01 at 12:06:38 | DEBUG | tbid: 59
2020-03-01 at 12:06:38 | DEBUG | fieldlist: None
2020-03-01 at 12:06:38 | DEBUG | idfiled: age
2020-03-01 at 12:06:38 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:06:43 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:06:43 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:06:43 | DEBUG | metadata exists ....
2020-03-01 at 12:06:48 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:06:49 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:06:49 | DEBUG | metadata exists ....
2020-03-01 at 12:06:49 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:06:49 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:06:49 | ERROR | Exception at crud.query query_table_byid(): 'int' object has no attribute 'astype' 
2020-03-01 at 12:08:37 | DEBUG | query_table_byid():
2020-03-01 at 12:08:37 | DEBUG | tablename: bank_dist
2020-03-01 at 12:08:37 | DEBUG | tbid: 59
2020-03-01 at 12:08:37 | DEBUG | fieldlist: None
2020-03-01 at 12:08:37 | DEBUG | idfiled: age
2020-03-01 at 12:08:37 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:08:40 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:08:40 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:08:40 | DEBUG | metadata exists ....
2020-03-01 at 12:08:42 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:08:44 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:08:44 | DEBUG | metadata exists ....
2020-03-01 at 12:08:44 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:08:44 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:08:44 | ERROR | Exception at crud.query query_table_byid(): 'str' object has no attribute 'astype' 
2020-03-01 at 12:18:26 | DEBUG | query_table_byid():
2020-03-01 at 12:18:26 | DEBUG | tablename: bank_dist
2020-03-01 at 12:18:26 | DEBUG | tbid: 59
2020-03-01 at 12:18:26 | DEBUG | fieldlist: None
2020-03-01 at 12:18:26 | DEBUG | idfiled: age
2020-03-01 at 12:18:26 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:18:34 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:18:34 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:18:34 | DEBUG | metadata exists ....
2020-03-01 at 12:18:38 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:18:40 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:18:40 | DEBUG | metadata exists ....
2020-03-01 at 12:18:40 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:18:40 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:18:40 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:18:41 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:18:41 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022B6592D220> ]
2020-03-01 at 12:19:23 | DEBUG | query_table_byid():
2020-03-01 at 12:19:23 | DEBUG | tablename: bank_dist
2020-03-01 at 12:19:23 | DEBUG | tbid: 59
2020-03-01 at 12:19:23 | DEBUG | fieldlist: None
2020-03-01 at 12:19:23 | DEBUG | idfiled: age
2020-03-01 at 12:19:23 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:19:33 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:19:33 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:19:33 | DEBUG | metadata exists ....
2020-03-01 at 12:19:38 | ERROR | Exception at crud.query query_table_byid(): ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response')) 
2020-03-01 at 12:19:49 | DEBUG | query_table_byid():
2020-03-01 at 12:19:49 | DEBUG | tablename: bank_dist
2020-03-01 at 12:19:49 | DEBUG | tbid: 59
2020-03-01 at 12:19:49 | DEBUG | fieldlist: None
2020-03-01 at 12:19:49 | DEBUG | idfiled: age
2020-03-01 at 12:19:49 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:19:52 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:19:52 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:19:52 | DEBUG | metadata exists ....
2020-03-01 at 12:19:56 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:19:59 | ERROR | Exception at crud.query query_table_byid(): ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response')) 
2020-03-01 at 12:20:08 | DEBUG | query_table_byid():
2020-03-01 at 12:20:08 | DEBUG | tablename: bank_dist
2020-03-01 at 12:20:08 | DEBUG | tbid: 59
2020-03-01 at 12:20:08 | DEBUG | fieldlist: None
2020-03-01 at 12:20:08 | DEBUG | idfiled: age
2020-03-01 at 12:20:08 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:20:11 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:20:11 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:20:11 | DEBUG | metadata exists ....
2020-03-01 at 12:20:13 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:20:14 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:20:14 | DEBUG | metadata exists ....
2020-03-01 at 12:20:14 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:20:14 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:20:14 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:20:14 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:20:14 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001B21623EA60> ]
2020-03-01 at 12:20:49 | DEBUG | query_table_byid():
2020-03-01 at 12:20:49 | DEBUG | tablename: bank_dist
2020-03-01 at 12:20:49 | DEBUG | tbid: 59
2020-03-01 at 12:20:49 | DEBUG | fieldlist: None
2020-03-01 at 12:20:49 | DEBUG | idfiled: age
2020-03-01 at 12:20:49 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:20:59 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:20:59 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:20:59 | DEBUG | metadata exists ....
2020-03-01 at 12:21:04 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:21:06 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:21:06 | DEBUG | metadata exists ....
2020-03-01 at 12:21:06 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:21:06 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:21:06 | ERROR | Exception at crud.query query_table_byid(): 'INTEGER' object has no attribute 'python' 
2020-03-01 at 12:21:13 | DEBUG | query_table_byid():
2020-03-01 at 12:21:13 | DEBUG | tablename: bank_dist
2020-03-01 at 12:21:13 | DEBUG | tbid: 59
2020-03-01 at 12:21:13 | DEBUG | fieldlist: None
2020-03-01 at 12:21:13 | DEBUG | idfiled: age
2020-03-01 at 12:21:13 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:21:20 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:21:20 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:21:20 | DEBUG | metadata exists ....
2020-03-01 at 12:21:22 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:21:25 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:21:25 | DEBUG | metadata exists ....
2020-03-01 at 12:21:25 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:21:25 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:21:25 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:21:25 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:21:25 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000025B7C4B6B50> ]
2020-03-01 at 12:27:33 | DEBUG | query_table_byid():
2020-03-01 at 12:27:33 | DEBUG | tablename: bank_dist
2020-03-01 at 12:27:33 | DEBUG | tbid: 59
2020-03-01 at 12:27:33 | DEBUG | fieldlist: None
2020-03-01 at 12:27:33 | DEBUG | idfiled: age
2020-03-01 at 12:27:33 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:27:36 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:27:36 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:27:36 | DEBUG | metadata exists ....
2020-03-01 at 12:27:40 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:27:42 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:27:42 | DEBUG | metadata exists ....
2020-03-01 at 12:27:42 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:27:42 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:27:42 | ERROR | Exception at crud.query query_table_byid(): type() takes 1 or 3 arguments 
2020-03-01 at 12:29:10 | DEBUG | query_table_byid():
2020-03-01 at 12:29:10 | DEBUG | tablename: bank_dist
2020-03-01 at 12:29:10 | DEBUG | tbid: 59
2020-03-01 at 12:29:10 | DEBUG | fieldlist: None
2020-03-01 at 12:29:10 | DEBUG | idfiled: age
2020-03-01 at 12:29:10 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:29:14 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:29:14 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:29:14 | DEBUG | metadata exists ....
2020-03-01 at 12:29:18 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:29:20 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:29:20 | DEBUG | metadata exists ....
2020-03-01 at 12:29:20 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:29:20 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:29:20 | ERROR | Exception at crud.query query_table_byid(): type.__new__() argument 1 must be str, not type 
2020-03-01 at 12:29:43 | DEBUG | query_table_byid():
2020-03-01 at 12:29:43 | DEBUG | tablename: bank_dist
2020-03-01 at 12:29:43 | DEBUG | tbid: 59
2020-03-01 at 12:29:43 | DEBUG | fieldlist: None
2020-03-01 at 12:29:43 | DEBUG | idfiled: age
2020-03-01 at 12:29:43 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:29:47 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:29:47 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:29:47 | DEBUG | metadata exists ....
2020-03-01 at 12:29:48 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:29:51 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:29:51 | DEBUG | metadata exists ....
2020-03-01 at 12:29:51 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:29:51 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:29:51 | ERROR | Exception at crud.query query_table_byid(): type.__new__() argument 2 must be tuple, not None 
2020-03-01 at 12:30:10 | DEBUG | query_table_byid():
2020-03-01 at 12:30:10 | DEBUG | tablename: bank_dist
2020-03-01 at 12:30:10 | DEBUG | tbid: 59
2020-03-01 at 12:30:10 | DEBUG | fieldlist: None
2020-03-01 at 12:30:10 | DEBUG | idfiled: age
2020-03-01 at 12:30:10 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:30:13 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:30:13 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:30:13 | DEBUG | metadata exists ....
2020-03-01 at 12:30:16 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:30:20 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:30:20 | DEBUG | metadata exists ....
2020-03-01 at 12:30:20 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:30:20 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:30:20 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:30:20 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:30:20 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001AE45012850> ]
2020-03-01 at 12:30:22 | DEBUG | query_table_byid():
2020-03-01 at 12:30:22 | DEBUG | tablename: bank_dist
2020-03-01 at 12:30:22 | DEBUG | tbid: 59
2020-03-01 at 12:30:22 | DEBUG | fieldlist: None
2020-03-01 at 12:30:22 | DEBUG | idfiled: age
2020-03-01 at 12:30:22 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:30:27 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:30:27 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:30:27 | DEBUG | metadata exists ....
2020-03-01 at 12:30:32 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:30:35 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:30:35 | DEBUG | metadata exists ....
2020-03-01 at 12:30:35 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:30:35 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:30:35 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 12:30:35 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 12:30:49 | DEBUG | query_table_byid():
2020-03-01 at 12:30:49 | DEBUG | tablename: bank_dist
2020-03-01 at 12:30:49 | DEBUG | tbid: 59
2020-03-01 at 12:30:49 | DEBUG | fieldlist: None
2020-03-01 at 12:30:49 | DEBUG | idfiled: age
2020-03-01 at 12:30:49 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:30:53 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:30:53 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:30:53 | DEBUG | metadata exists ....
2020-03-01 at 12:30:55 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:30:57 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:30:57 | DEBUG | metadata exists ....
2020-03-01 at 12:30:57 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:30:57 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:30:57 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 12:30:57 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 12:46:44 | DEBUG | query_table_byid():
2020-03-01 at 12:46:44 | DEBUG | tablename: bank_dist
2020-03-01 at 12:46:44 | DEBUG | tbid: 59
2020-03-01 at 12:46:44 | DEBUG | fieldlist: None
2020-03-01 at 12:46:44 | DEBUG | idfiled: age
2020-03-01 at 12:46:44 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:46:47 | DEBUG | query_table_byid():
2020-03-01 at 12:46:47 | DEBUG | tablename: bank_dist
2020-03-01 at 12:46:47 | DEBUG | tbid: 59
2020-03-01 at 12:46:47 | DEBUG | fieldlist: None
2020-03-01 at 12:46:47 | DEBUG | idfiled: age
2020-03-01 at 12:46:47 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:46:50 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:46:50 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:46:50 | DEBUG | metadata exists ....
2020-03-01 at 12:46:52 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:46:56 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:46:56 | DEBUG | metadata exists ....
2020-03-01 at 12:46:56 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:46:56 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:46:56 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 12:46:56 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 12:47:18 | DEBUG | query_table_byid():
2020-03-01 at 12:47:18 | DEBUG | tablename: bank_dist
2020-03-01 at 12:47:18 | DEBUG | tbid: 59
2020-03-01 at 12:47:18 | DEBUG | fieldlist: None
2020-03-01 at 12:47:18 | DEBUG | idfiled: age
2020-03-01 at 12:47:18 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:47:22 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:47:22 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:47:22 | DEBUG | metadata exists ....
2020-03-01 at 12:47:23 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:47:27 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:47:27 | DEBUG | metadata exists ....
2020-03-01 at 12:47:27 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:47:27 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:47:27 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 12:47:27 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 12:48:59 | DEBUG | query_table_byid():
2020-03-01 at 12:48:59 | DEBUG | tablename: bank_dist
2020-03-01 at 12:48:59 | DEBUG | tbid: 59
2020-03-01 at 12:48:59 | DEBUG | fieldlist: None
2020-03-01 at 12:48:59 | DEBUG | idfiled: age
2020-03-01 at 12:48:59 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:49:03 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:49:03 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:49:03 | DEBUG | metadata exists ....
2020-03-01 at 12:49:04 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:49:07 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:49:07 | DEBUG | metadata exists ....
2020-03-01 at 12:49:07 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:49:07 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:49:07 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 12:49:07 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 12:51:14 | DEBUG | query_table_byid():
2020-03-01 at 12:51:14 | DEBUG | tablename: bank_dist
2020-03-01 at 12:51:14 | DEBUG | tbid: 59
2020-03-01 at 12:51:14 | DEBUG | fieldlist: None
2020-03-01 at 12:51:14 | DEBUG | idfiled: age
2020-03-01 at 12:51:14 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:51:18 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:51:18 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:51:18 | DEBUG | metadata exists ....
2020-03-01 at 12:51:22 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:51:24 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:51:24 | DEBUG | metadata exists ....
2020-03-01 at 12:51:24 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:51:24 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:51:24 | ERROR | Exception at crud.query query_table_byid(): 'INTEGER' object is not callable 
2020-03-01 at 12:51:37 | DEBUG | query_table_byid():
2020-03-01 at 12:51:37 | DEBUG | tablename: bank_dist
2020-03-01 at 12:51:37 | DEBUG | tbid: 59
2020-03-01 at 12:51:37 | DEBUG | fieldlist: None
2020-03-01 at 12:51:37 | DEBUG | idfiled: age
2020-03-01 at 12:51:37 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:51:39 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:51:39 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:51:39 | DEBUG | metadata exists ....
2020-03-01 at 12:51:40 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:51:41 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:51:41 | DEBUG | metadata exists ....
2020-03-01 at 12:51:41 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:51:41 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:51:41 | DEBUG | Primarykey select param : [ {'age': '59'} ]
2020-03-01 at 12:51:41 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 12:52:52 | DEBUG | query_table_byid():
2020-03-01 at 12:52:52 | DEBUG | tablename: bank_dist
2020-03-01 at 12:52:52 | DEBUG | tbid: 59
2020-03-01 at 12:52:52 | DEBUG | fieldlist: None
2020-03-01 at 12:52:52 | DEBUG | idfiled: age
2020-03-01 at 12:52:52 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:52:55 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:52:55 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:52:55 | DEBUG | metadata exists ....
2020-03-01 at 12:52:56 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:52:58 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:52:58 | DEBUG | metadata exists ....
2020-03-01 at 12:52:58 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:52:58 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:52:58 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:52:58 | ERROR | Exception at crud.query query_table_byid(): Code: 43, e.displayText() = DB::Exception: Illegal types of arguments (UInt16, String) of function equals (version 20.1.3.7 (official build))
 
2020-03-01 at 12:53:17 | DEBUG | query_table_byid():
2020-03-01 at 12:53:17 | DEBUG | tablename: bank_dist
2020-03-01 at 12:53:17 | DEBUG | tbid: 59
2020-03-01 at 12:53:17 | DEBUG | fieldlist: None
2020-03-01 at 12:53:17 | DEBUG | idfiled: age
2020-03-01 at 12:53:17 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:53:21 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:53:21 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:53:21 | DEBUG | metadata exists ....
2020-03-01 at 12:53:24 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:53:25 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:53:25 | DEBUG | metadata exists ....
2020-03-01 at 12:53:25 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:53:25 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:53:25 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:53:25 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:53:25 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000222223ADC40> ]
2020-03-01 at 12:59:41 | DEBUG | query_table_byid():
2020-03-01 at 12:59:41 | DEBUG | tablename: bank_dist
2020-03-01 at 12:59:41 | DEBUG | tbid: 59
2020-03-01 at 12:59:41 | DEBUG | fieldlist: None
2020-03-01 at 12:59:41 | DEBUG | idfiled: age
2020-03-01 at 12:59:41 | DEBUG | Connect use uri [ clickhouse://default:passw0rd@192.168.10.12:28123/test ]
2020-03-01 at 12:59:46 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 12:59:46 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:59:46 | DEBUG | metadata exists ....
2020-03-01 at 12:59:47 | DEBUG | Read Schema: [ test ]
2020-03-01 at 12:59:49 | DEBUG | MetaData(bind=Engine(clickhouse://default:***@192.168.10.12:28123/test))
2020-03-01 at 12:59:49 | DEBUG | metadata exists ....
2020-03-01 at 12:59:49 | DEBUG | Table Columns: ['bank_dist.age', 'bank_dist.job', 'bank_dist.marital', 'bank_dist.education', 'bank_dist.default', 'bank_dist.housing', 'bank_dist.loan', 'bank_dist.contact', 'bank_dist.month', 'bank_dist.day_of_week', 'bank_dist.duration', 'bank_dist.campaign', 'bank_dist.pdays', 'bank_dist.previous', 'bank_dist.poutcome', 'bank_dist.empvar_rate', 'bank_dist.cons_price_idx', 'bank_dist.cons_conf_idx', 'bank_dist.euribor3m', 'bank_dist.nr_employed']
2020-03-01 at 12:59:49 | DEBUG | Primarykey select string : [ age=:age ]
2020-03-01 at 12:59:49 | DEBUG | Primarykey select param : [ {'age': 59} ]
2020-03-01 at 12:59:49 | DEBUG | SQL of Query: [ SELECT age, job, marital, education, "default", housing, loan, contact, month, day_of_week, duration, campaign, pdays, previous, poutcome, empvar_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed 
FROM bank_dist 
WHERE age=%(age)s
 LIMIT %(param_1)s ]
2020-03-01 at 12:59:49 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000027A06845310> ]
2020-03-01 at 13:00:37 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:00:37 | INFO | Query from table test
2020-03-01 at 13:00:37 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:37 | DEBUG | query_table():
2020-03-01 at 13:00:37 | DEBUG | tablename: test
2020-03-01 at 13:00:37 | DEBUG | fieldlist: *
2020-03-01 at 13:00:37 | DEBUG | filter: id=:id and name=:name
2020-03-01 at 13:00:37 | DEBUG | limit: 10
2020-03-01 at 13:00:37 | DEBUG | offset: 0
2020-03-01 at 13:00:37 | DEBUG | order: name desc
2020-03-01 at 13:00:37 | DEBUG | group: name
2020-03-01 at 13:00:37 | DEBUG | count_only: False
2020-03-01 at 13:00:37 | DEBUG | include_count: True
2020-03-01 at 13:00:37 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.10.15:23306/acmondb ]
2020-03-01 at 13:00:37 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 13:00:37 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:37 | DEBUG | metadata exists ....
2020-03-01 at 13:00:37 | DEBUG | Read Schema: [ acmondb ]
2020-03-01 at 13:00:37 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:37 | DEBUG | metadata exists ....
2020-03-01 at 13:00:37 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:37 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test GROUP BY name ORDER BY name desc 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:00:37 | DEBUG | SQL of Count: [ SELECT count(test.id) AS col_count 
FROM test ]
2020-03-01 at 13:00:37 | DEBUG | SQL of Query Full : [ SELECT test.id, test.name, test.phone 
FROM test 
WHERE id=%(id)s and name=%(name)s GROUP BY name ORDER BY name desc 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:00:37 | DEBUG | SQL of Count Full : [ SELECT count(test.id) AS col_count 
FROM test 
WHERE id=%(id)s and name=%(name)s ]
2020-03-01 at 13:00:37 | DEBUG | Select Count Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C02A6AC0> ]
2020-03-01 at 13:00:37 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C0248BE0> ]
2020-03-01 at 13:00:37 | INFO | {'record_count': 1, 'data': [{'id': 3, 'name': 'sdf', 'phone': '234565'}]}
2020-03-01 at 13:00:37 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:37 | DEBUG | query_table_byid():
2020-03-01 at 13:00:37 | DEBUG | tablename: test
2020-03-01 at 13:00:37 | DEBUG | tbid: 3
2020-03-01 at 13:00:37 | DEBUG | fieldlist: None
2020-03-01 at 13:00:37 | DEBUG | idfiled: None
2020-03-01 at 13:00:37 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:37 | DEBUG | metadata exists ....
2020-03-01 at 13:00:37 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:37 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:00:37 | DEBUG | Primarykey select param : [ {'id': 3} ]
2020-03-01 at 13:00:38 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test 
WHERE id=%(id)s 
 LIMIT %(param_1)s ]
2020-03-01 at 13:00:38 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C02C76D0> ]
2020-03-01 at 13:00:38 | INFO | {'data': [{'id': 3, 'name': 'sdf', 'phone': '234565'}]}
2020-03-01 at 13:00:38 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:00:38 | INFO | Insert into table test
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C033C6D0> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 432}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C032E0A0> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 433}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C02BDB20> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 434}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C0250A30> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 435}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C0381070> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 436}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C039BB20> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 437}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C03A8B50> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 439}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C037B700> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 441}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C02481C0> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 443}
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | post_table():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:00:38 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:00:38 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000001C5C03C4DC0> ]
2020-03-01 at 13:00:38 | INFO | {'insert_row_id': 445}
2020-03-01 at 13:00:38 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:00:38 | INFO | Update record in table test
2020-03-01 at 13:00:38 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:00:38 | DEBUG | put_table_by_id():
2020-03-01 at 13:00:38 | DEBUG | tablename: test
2020-03-01 at 13:00:38 | DEBUG | idfiled: id
2020-03-01 at 13:00:38 | DEBUG | idvalue: 120
2020-03-01 at 13:00:38 | DEBUG | fieldvalue: {'name':'newname0'}
2020-03-01 at 13:00:38 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:00:38 | DEBUG | metadata exists ....
2020-03-01 at 13:00:38 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:00:38 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:00:38 | ERROR | Exception at crud.update put_table_by_id(): 
2020-03-01 at 13:01:35 | DEBUG | put_table_by_id():
2020-03-01 at 13:01:35 | DEBUG | tablename: test
2020-03-01 at 13:01:35 | DEBUG | idfiled: id
2020-03-01 at 13:01:35 | DEBUG | idvalue: 35
2020-03-01 at 13:01:35 | DEBUG | fieldvalue: {'name':'zhjjj'}
2020-03-01 at 13:01:35 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.10.15:23306/acmondb ]
2020-03-01 at 13:01:35 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 13:01:35 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:01:35 | DEBUG | metadata exists ....
2020-03-01 at 13:01:35 | DEBUG | Read Schema: [ acmondb ]
2020-03-01 at 13:01:35 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:01:35 | DEBUG | metadata exists ....
2020-03-01 at 13:01:35 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:01:35 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:01:35 | ERROR | Exception at crud.update put_table_by_id(): 
2020-03-01 at 13:36:18 | DEBUG | put_table_by_id():
2020-03-01 at 13:36:18 | DEBUG | tablename: test
2020-03-01 at 13:36:18 | DEBUG | idfiled: id
2020-03-01 at 13:36:18 | DEBUG | idvalue: 35
2020-03-01 at 13:36:18 | DEBUG | fieldvalue: {'name':'zhjjj'}
2020-03-01 at 13:36:18 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.10.15:23306/acmondb ]
2020-03-01 at 13:36:18 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 13:36:18 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:18 | DEBUG | metadata exists ....
2020-03-01 at 13:36:18 | DEBUG | Read Schema: [ acmondb ]
2020-03-01 at 13:36:18 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:18 | DEBUG | metadata exists ....
2020-03-01 at 13:36:18 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:18 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:36:18 | DEBUG | Primarykey select param : [ {'up_b_id': 35} ]
2020-03-01 at 13:36:18 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s WHERE id=%(up_b_id)s ]
2020-03-01 at 13:36:18 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000023DF6934340> ]
2020-03-01 at 13:36:26 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:36:26 | INFO | Query from table test
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | query_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | fieldlist: *
2020-03-01 at 13:36:26 | DEBUG | filter: id=:id and name=:name
2020-03-01 at 13:36:26 | DEBUG | limit: 10
2020-03-01 at 13:36:26 | DEBUG | offset: 0
2020-03-01 at 13:36:26 | DEBUG | order: name desc
2020-03-01 at 13:36:26 | DEBUG | group: name
2020-03-01 at 13:36:26 | DEBUG | count_only: False
2020-03-01 at 13:36:26 | DEBUG | include_count: True
2020-03-01 at 13:36:26 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.10.15:23306/acmondb ]
2020-03-01 at 13:36:26 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Read Schema: [ acmondb ]
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test GROUP BY name ORDER BY name desc 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:36:26 | DEBUG | SQL of Count: [ SELECT count(test.id) AS col_count 
FROM test ]
2020-03-01 at 13:36:26 | DEBUG | SQL of Query Full : [ SELECT test.id, test.name, test.phone 
FROM test 
WHERE id=%(id)s and name=%(name)s GROUP BY name ORDER BY name desc 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:36:26 | DEBUG | SQL of Count Full : [ SELECT count(test.id) AS col_count 
FROM test 
WHERE id=%(id)s and name=%(name)s ]
2020-03-01 at 13:36:26 | DEBUG | Select Count Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B447AF0> ]
2020-03-01 at 13:36:26 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B400460> ]
2020-03-01 at 13:36:26 | INFO | {'record_count': 1, 'data': [{'id': 3, 'name': 'sdf', 'phone': '234565'}]}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | query_table_byid():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | tbid: 3
2020-03-01 at 13:36:26 | DEBUG | fieldlist: None
2020-03-01 at 13:36:26 | DEBUG | idfiled: None
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:36:26 | DEBUG | Primarykey select param : [ {'id': 3} ]
2020-03-01 at 13:36:26 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test 
WHERE id=%(id)s 
 LIMIT %(param_1)s ]
2020-03-01 at 13:36:26 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B3E7A30> ]
2020-03-01 at 13:36:26 | INFO | {'data': [{'id': 3, 'name': 'sdf', 'phone': '234565'}]}
2020-03-01 at 13:36:26 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:36:26 | INFO | Insert into table test
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B4DBBB0> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 447}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B4DB640> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 448}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B4C1220> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 449}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B4505B0> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 450}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: {'name':'single','phone':'phonnum-123'}
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ {'name': 'single', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B525520> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 451}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B551B80> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 452}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B52BEB0> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 454}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B3ED5B0> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 456}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B3F0160> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 458}
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | post_table():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: <built-in function id>
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: [{'name':'multiple1','phone':'mphone-123'},{'name':'multiple2','phone':'mphone-345'}]
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:36:26 | DEBUG | Insert Values: [ [{'name': 'multiple1', 'phone': 'mphone-123'}, {'name': 'multiple2', 'phone': 'mphone-345'}] ]
2020-03-01 at 13:36:26 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B51EC10> ]
2020-03-01 at 13:36:26 | INFO | {'insert_row_id': 460}
2020-03-01 at 13:36:26 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:36:26 | INFO | Update record in table test
2020-03-01 at 13:36:26 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:26 | DEBUG | put_table_by_id():
2020-03-01 at 13:36:26 | DEBUG | tablename: test
2020-03-01 at 13:36:26 | DEBUG | idfiled: id
2020-03-01 at 13:36:26 | DEBUG | idvalue: 120
2020-03-01 at 13:36:26 | DEBUG | fieldvalue: {'name':'newname0'}
2020-03-01 at 13:36:26 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:26 | DEBUG | metadata exists ....
2020-03-01 at 13:36:26 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:26 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:36:26 | DEBUG | Primarykey select param : [ {'up_b_id': 120} ]
2020-03-01 at 13:36:26 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s WHERE id=%(up_b_id)s ]
2020-03-01 at 13:36:26 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B538520> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table_by_id():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | idfiled: id
2020-03-01 at 13:36:27 | DEBUG | idvalue: 120
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'newname1'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:36:27 | DEBUG | Primarykey select param : [ {'up_b_id': 120} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s WHERE id=%(up_b_id)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B419070> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table_by_id():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | idfiled: id
2020-03-01 at 13:36:27 | DEBUG | idvalue: 120
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'newname2'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:36:27 | DEBUG | Primarykey select param : [ {'up_b_id': 120} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s WHERE id=%(up_b_id)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B3E70D0> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table_by_id():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | idfiled: id
2020-03-01 at 13:36:27 | DEBUG | idvalue: 120
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'newname3'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:36:27 | DEBUG | Primarykey select param : [ {'up_b_id': 120} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s WHERE id=%(up_b_id)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B5A2F70> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table_by_id():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | idfiled: id
2020-03-01 at 13:36:27 | DEBUG | idvalue: 120
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'newname4'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:36:27 | DEBUG | Primarykey select param : [ {'up_b_id': 120} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s WHERE id=%(up_b_id)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B50BFA0> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | filter: name=:pname
2020-03-01 at 13:36:27 | DEBUG | filterparam: {'pname': 'newname'}
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'new-name','phone':'mphon-e-345'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Update Values: [ {'name': 'new-name', 'phone': 'mphon-e-345'} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s, phone=%(phone)s WHERE name=%(pname)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B5B5C70> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | filter: name=:pname
2020-03-01 at 13:36:27 | DEBUG | filterparam: {'pname': 'newname'}
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'new-name','phone':'mphon-e-345'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Update Values: [ {'name': 'new-name', 'phone': 'mphon-e-345'} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s, phone=%(phone)s WHERE name=%(pname)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B4A5700> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | filter: name=:pname
2020-03-01 at 13:36:27 | DEBUG | filterparam: {'pname': 'newname'}
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'new-name','phone':'mphon-e-345'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Update Values: [ {'name': 'new-name', 'phone': 'mphon-e-345'} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s, phone=%(phone)s WHERE name=%(pname)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B4AAC10> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | filter: name=:pname
2020-03-01 at 13:36:27 | DEBUG | filterparam: {'pname': 'newname'}
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'new-name','phone':'mphon-e-345'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Update Values: [ {'name': 'new-name', 'phone': 'mphon-e-345'} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s, phone=%(phone)s WHERE name=%(pname)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B5E8400> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | put_table():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | filter: name=:pname
2020-03-01 at 13:36:27 | DEBUG | filterparam: {'pname': 'newname'}
2020-03-01 at 13:36:27 | DEBUG | fieldvalue: {'name':'new-name','phone':'mphon-e-345'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Update Values: [ {'name': 'new-name', 'phone': 'mphon-e-345'} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s, phone=%(phone)s WHERE name=%(pname)s ]
2020-03-01 at 13:36:27 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B5E16A0> ]
2020-03-01 at 13:36:27 | INFO | {'udpate_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:36:27 | INFO | Delete record in table test
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | delete_table_by_id():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | idfiled: id
2020-03-01 at 13:36:27 | DEBUG | idvalue: 130
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:36:27 | DEBUG | Primarykey select param : [ {'id': 130} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Delete: [ DELETE FROM test ]
2020-03-01 at 13:36:27 | DEBUG | Delete Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B457C40> ]
2020-03-01 at 13:36:27 | INFO | {'delet_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | delete_table_by_id():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | idfiled: id
2020-03-01 at 13:36:27 | DEBUG | idvalue: 131
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:36:27 | DEBUG | Primarykey select param : [ {'id': 131} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Delete: [ DELETE FROM test ]
2020-03-01 at 13:36:27 | DEBUG | Delete Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B5386A0> ]
2020-03-01 at 13:36:27 | INFO | {'delet_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | delete_table_by_id():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | idfiled: id
2020-03-01 at 13:36:27 | DEBUG | idvalue: 132
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:36:27 | DEBUG | Primarykey select param : [ {'id': 132} ]
2020-03-01 at 13:36:27 | DEBUG | SQL of Delete: [ DELETE FROM test ]
2020-03-01 at 13:36:27 | DEBUG | Delete Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B556BE0> ]
2020-03-01 at 13:36:27 | INFO | {'delet_rowcount': 0}
2020-03-01 at 13:36:27 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:36:27 | DEBUG | delete_table():
2020-03-01 at 13:36:27 | DEBUG | tablename: test
2020-03-01 at 13:36:27 | DEBUG | filter: name=:pname
2020-03-01 at 13:36:27 | DEBUG | filterparam: {'pname':'single'}
2020-03-01 at 13:36:27 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:36:27 | DEBUG | metadata exists ....
2020-03-01 at 13:36:27 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:36:27 | DEBUG | SQL of Delete: [ DELETE FROM test ]
2020-03-01 at 13:36:27 | DEBUG | Delete Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000022F5B55D310> ]
2020-03-01 at 13:36:27 | INFO | {'delet_rowcount': 10}
2020-03-01 at 13:38:21 | INFO | pyAPIStart Up ....
2020-03-01 at 13:38:21 | INFO | Api prefix is: [ /api/v2 ]
2020-03-01 at 13:38:21 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.10.15:23306/acmondb ]
2020-03-01 at 13:38:21 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 13:38:21 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:38:21 | DEBUG | metadata exists ....
2020-03-01 at 13:38:21 | DEBUG | Read Schema: [ acmondb ]
2020-03-01 at 13:38:26 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:38:26 | INFO | Access api root: 
2020-03-01 at 13:39:14 | INFO | pyAPIStart Up ....
2020-03-01 at 13:39:14 | INFO | Api prefix is: [ /api/v2 ]
2020-03-01 at 13:39:14 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.10.15:23306/acmondb ]
2020-03-01 at 13:39:15 | DEBUG | Metafile does not exists, generate it from database ...
2020-03-01 at 13:39:15 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:15 | DEBUG | metadata exists ....
2020-03-01 at 13:39:15 | DEBUG | Read Schema: [ acmondb ]
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | Access api root: 
2020-03-01 at 13:39:16 | DEBUG | Access '/' : run in api_root()
2020-03-01 at 13:39:16 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:16 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:16 | INFO | Response: 
 {
    "Application_Name":"pyAPI",
    "Version":"v1.01",
    "Author":"ibmzhangjun@139.com"
} 
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | Get access tocken: 
2020-03-01 at 13:39:16 | INFO | POST uri: [ http://192.168.10.158:3000/api/v2/token ]
2020-03-01 at 13:39:16 | INFO | Post body: 
 {
    "username":"admin",
    "password":"admin"
} 
2020-03-01 at 13:39:16 | DEBUG | Access '/token' : run in login_for_access_token(), input data username: [admin] and password: [admin]
2020-03-01 at 13:39:16 | DEBUG | authenticate_user with username: [admin] and password: [admin]
2020-03-01 at 13:39:16 | DEBUG | verify_password with hashed_password: [$2b$12$NL3bGbzvcULj5Y05Qzhh1e25IuAexUhfSm5IvXe2rms3hVZ605knO]
2020-03-01 at 13:39:16 | DEBUG | create_access_token with encoded_jwt: [b'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU4MzA0Mjk1Nn0.zcyQd2rNSJzZA1hTSvcmAZb0CQokFklPpAq_qp8BjzQ']
2020-03-01 at 13:39:16 | INFO | Response: 
 {
    "access_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU4MzA0Mjk1Nn0.zcyQd2rNSJzZA1hTSvcmAZb0CQokFklPpAq_qp8BjzQ",
    "token_type":"bearer"
} 
2020-03-01 at 13:39:16 | INFO | Token: 
 Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU4MzA0Mjk1Nn0.zcyQd2rNSJzZA1hTSvcmAZb0CQokFklPpAq_qp8BjzQ 
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | Get user info: 
2020-03-01 at 13:39:16 | INFO | GET uri : [ http://192.168.10.158:3000/api/v2/users/me/ ]
2020-03-01 at 13:39:16 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:16 | INFO | Status Code: [ 404 ]
2020-03-01 at 13:39:16 | INFO | Response: 
 {
    "detail":"Not Found"
} 
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | Get schema list: 
2020-03-01 at 13:39:16 | INFO | GET uri : [ http://192.168.10.158:3000/api/v2/_schema ]
2020-03-01 at 13:39:16 | DEBUG | Access '/_schema' : run in get_schema()
2020-03-01 at 13:39:16 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:16 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:16 | INFO | Response: 
 [
    "faultmsg",
    "parameter",
    "statistics",
    "test",
    "v_faultmsg"
] 
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | Get schema [test] : 
2020-03-01 at 13:39:16 | INFO | GET uri : [ http://192.168.10.158:3000/api/v2/_schema/test ]
2020-03-01 at 13:39:16 | DEBUG | Access '/_schema/{table_name}' : run in get_table_schema(), input data table_name: [test]
2020-03-01 at 13:39:16 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:16 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:16 | INFO | Response: 
 {
    "name":"test",
    "type":"table",
    "primarykeys":[
        "id"
    ],
    "indexes":[],
    "columns":[
        {
            "name":"id",
            "type":"int",
            "default":null,
            "nullable":false
        },
        {
            "name":"name",
            "type":"str",
            "default":null,
            "nullable":false
        },
        {
            "name":"phone",
            "type":"str",
            "default":"'234565'",
            "nullable":false
        }
    ]
} 
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | Query table [test] : 
2020-03-01 at 13:39:16 | INFO | GET uri : [ http://192.168.10.158:3000/api/v2/_table/test ]
2020-03-01 at 13:39:16 | DEBUG | Access '/_table/{table_name}' : run in get_data(), input data table_name: [test]
2020-03-01 at 13:39:16 | DEBUG | fieldlist: [*]
2020-03-01 at 13:39:16 | DEBUG | filter: [None]
2020-03-01 at 13:39:16 | DEBUG | filterparam: [None]
2020-03-01 at 13:39:16 | DEBUG | limit: [10]
2020-03-01 at 13:39:16 | DEBUG | offset: [0]
2020-03-01 at 13:39:16 | DEBUG | order: [None]
2020-03-01 at 13:39:16 | DEBUG | group: [None]
2020-03-01 at 13:39:16 | DEBUG | count_only: [False]
2020-03-01 at 13:39:16 | DEBUG | include_count: [False]
2020-03-01 at 13:39:16 | DEBUG | query_table():
2020-03-01 at 13:39:16 | DEBUG | tablename: test
2020-03-01 at 13:39:16 | DEBUG | fieldlist: *
2020-03-01 at 13:39:16 | DEBUG | filter: None
2020-03-01 at 13:39:16 | DEBUG | limit: 10
2020-03-01 at 13:39:16 | DEBUG | offset: 0
2020-03-01 at 13:39:16 | DEBUG | order: None
2020-03-01 at 13:39:16 | DEBUG | group: None
2020-03-01 at 13:39:16 | DEBUG | count_only: False
2020-03-01 at 13:39:16 | DEBUG | include_count: False
2020-03-01 at 13:39:16 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:16 | DEBUG | metadata exists ....
2020-03-01 at 13:39:16 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:16 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:39:16 | DEBUG | SQL of Count: [ SELECT count(test.id) AS col_count 
FROM test ]
2020-03-01 at 13:39:16 | DEBUG | SQL of Query Full : [ SELECT test.id, test.name, test.phone 
FROM test 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:39:16 | DEBUG | SQL of Count Full : [ SELECT count(test.id) AS col_count 
FROM test ]
2020-03-01 at 13:39:16 | DEBUG | Select Count Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000210912A0BE0> ]
2020-03-01 at 13:39:16 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000021091299040> ]
2020-03-01 at 13:39:16 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:16 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:16 | INFO | Response: 
 {
    "data":[
        {
            "id":1,
            "name":"amy",
            "phone":"234565"
        },
        {
            "id":2,
            "name":"amy",
            "phone":"234565"
        },
        {
            "id":3,
            "name":"sdf",
            "phone":"234565"
        },
        {
            "id":4,
            "name":"ggg",
            "phone":"234565"
        },
        {
            "id":5,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":6,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":7,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":8,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":9,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":10,
            "name":"sdf",
            "phone":"234243"
        }
    ]
} 
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | Query table by id [test] : 
2020-03-01 at 13:39:16 | INFO | GET uri : [ http://192.168.10.158:3000/api/v2/_table/test/66 ]
2020-03-01 at 13:39:16 | DEBUG | Access '/_table/{table_name}/{id}' : run in get_data_by_id(), input data table_name: [test]
2020-03-01 at 13:39:16 | DEBUG | fieldlist: [*]
2020-03-01 at 13:39:16 | DEBUG | idfield: [id]
2020-03-01 at 13:39:16 | DEBUG | query_table_byid():
2020-03-01 at 13:39:16 | DEBUG | tablename: test
2020-03-01 at 13:39:16 | DEBUG | tbid: 66
2020-03-01 at 13:39:16 | DEBUG | fieldlist: *
2020-03-01 at 13:39:16 | DEBUG | idfiled: id
2020-03-01 at 13:39:16 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:16 | DEBUG | metadata exists ....
2020-03-01 at 13:39:16 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:16 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:39:16 | DEBUG | Primarykey select param : [ {'id': 66} ]
2020-03-01 at 13:39:16 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test 
WHERE id=%(id)s 
 LIMIT %(param_1)s ]
2020-03-01 at 13:39:16 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000210912DE4F0> ]
2020-03-01 at 13:39:16 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:16 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:16 | INFO | Response: 
 {
    "data":[
        {
            "id":66,
            "name":"j2ack",
            "phone":"54565789"
        }
    ]
} 
2020-03-01 at 13:39:16 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:16 | INFO | POST Query table [test] : 
2020-03-01 at 13:39:16 | INFO | Post body: 
 {
    "fieldlist":"*",
    "filter":"id>:qid",
    "filterparam":"{'qid':6}",
    "limit":5,
    "offset":0,
    "count_only":false,
    "include_count":true
} 
2020-03-01 at 13:39:16 | INFO | POST uri : [ http://192.168.10.158:3000/api/v2/_table/test/query ]
2020-03-01 at 13:39:16 | DEBUG | Access '/_table/{table_name}/query' : run in query_data(), input data table_name: [test]
2020-03-01 at 13:39:16 | DEBUG | body: [fieldlist='*' filter='id>:qid' filterparam="{'qid':6}" limit=5 offset=0 order=None group=None count_only=False include_count=True]
2020-03-01 at 13:39:16 | DEBUG | query_table():
2020-03-01 at 13:39:16 | DEBUG | tablename: test
2020-03-01 at 13:39:16 | DEBUG | fieldlist: *
2020-03-01 at 13:39:16 | DEBUG | filter: id>:qid
2020-03-01 at 13:39:16 | DEBUG | limit: 5
2020-03-01 at 13:39:16 | DEBUG | offset: 0
2020-03-01 at 13:39:16 | DEBUG | order: None
2020-03-01 at 13:39:16 | DEBUG | group: None
2020-03-01 at 13:39:16 | DEBUG | count_only: False
2020-03-01 at 13:39:16 | DEBUG | include_count: True
2020-03-01 at 13:39:16 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:16 | DEBUG | metadata exists ....
2020-03-01 at 13:39:16 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:16 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:39:16 | DEBUG | SQL of Count: [ SELECT count(test.id) AS col_count 
FROM test ]
2020-03-01 at 13:39:16 | DEBUG | SQL of Query Full : [ SELECT test.id, test.name, test.phone 
FROM test 
WHERE id>%(qid)s 
 LIMIT %(param_1)s, %(param_2)s ]
2020-03-01 at 13:39:16 | DEBUG | SQL of Count Full : [ SELECT count(test.id) AS col_count 
FROM test 
WHERE id>%(qid)s ]
2020-03-01 at 13:39:16 | DEBUG | Select Count Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000002109111A3A0> ]
2020-03-01 at 13:39:17 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000210911FF640> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "record_count":259,
    "data":[
        {
            "id":7,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":8,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":9,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":10,
            "name":"sdf",
            "phone":"234243"
        },
        {
            "id":35,
            "name":"zhjjj",
            "phone":"241124"
        }
    ]
} 
2020-03-01 at 13:39:17 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:17 | INFO | POST Query table by id [test] : 
2020-03-01 at 13:39:17 | INFO | Post body: 
 {
    "fieldlist":"*",
    "idfield":"id",
    "id":"66"
} 
2020-03-01 at 13:39:17 | INFO | POST uri : [ http://192.168.10.158:3000/api/v2/_table/test/querybyid ]
2020-03-01 at 13:39:17 | DEBUG | Access '/_table/{table_name}/querybyid' : run in query_data_by_id(), input data table_name: [test]
2020-03-01 at 13:39:17 | DEBUG | body: [fieldlist='*' idfield='id' id='66']
2020-03-01 at 13:39:17 | DEBUG | query_table_byid():
2020-03-01 at 13:39:17 | DEBUG | tablename: test
2020-03-01 at 13:39:17 | DEBUG | tbid: 66
2020-03-01 at 13:39:17 | DEBUG | fieldlist: *
2020-03-01 at 13:39:17 | DEBUG | idfiled: id
2020-03-01 at 13:39:17 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:17 | DEBUG | metadata exists ....
2020-03-01 at 13:39:17 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:17 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:39:17 | DEBUG | Primarykey select param : [ {'id': 66} ]
2020-03-01 at 13:39:17 | DEBUG | SQL of Query: [ SELECT test.id, test.name, test.phone 
FROM test 
WHERE id=%(id)s 
 LIMIT %(param_1)s ]
2020-03-01 at 13:39:17 | DEBUG | Select Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000210911E0700> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "data":[
        {
            "id":66,
            "name":"j2ack",
            "phone":"54565789"
        }
    ]
} 
2020-03-01 at 13:39:17 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:17 | INFO | POST table [test] : 
2020-03-01 at 13:39:17 | INFO | Post body: 
 {
    "fieldvalue":"{'name':'ntestname','phone':'phonnum-123'}",
    "idfield":"id"
} 
2020-03-01 at 13:39:17 | INFO | POST uri : [ http://192.168.10.158:3000/api/v2/_table/test ]
2020-03-01 at 13:39:17 | DEBUG | Access '/_table/{table_name}' : run in post_data(), input data table_name: [test]
2020-03-01 at 13:39:17 | DEBUG | body: [fieldvalue="{'name':'ntestname','phone':'phonnum-123'}" idfield='id']
2020-03-01 at 13:39:17 | DEBUG | post_table():
2020-03-01 at 13:39:17 | DEBUG | tablename: test
2020-03-01 at 13:39:17 | DEBUG | idfiled: id
2020-03-01 at 13:39:17 | DEBUG | fieldvalue: {'name':'ntestname','phone':'phonnum-123'}
2020-03-01 at 13:39:17 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:17 | DEBUG | metadata exists ....
2020-03-01 at 13:39:17 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:17 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:39:17 | DEBUG | Insert Values: [ {'name': 'ntestname', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:39:17 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000021091328820> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "insert_row_id":462
} 
2020-03-01 at 13:39:17 | INFO | Insert ID: 
 462 
2020-03-01 at 13:39:17 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:17 | INFO | PUT table [test] : 
2020-03-01 at 13:39:17 | INFO | Put body: 
 {
    "filter":"id=:pid",
    "filterparam":"{'pid':462}",
    "fieldvalue":"{'name':'anewname','phone':'54321'}"
} 
2020-03-01 at 13:39:17 | INFO | PUT uri : [ http://192.168.10.158:3000/api/v2/_table/test ]
2020-03-01 at 13:39:17 | DEBUG | Access '/_table/{table_name}' : run in put_data(), input data table_name: [test]
2020-03-01 at 13:39:17 | DEBUG | body: [filter='id=:pid' filterparam="{'pid':462}" fieldvalue="{'name':'anewname','phone':'54321'}"]
2020-03-01 at 13:39:17 | DEBUG | put_table():
2020-03-01 at 13:39:17 | DEBUG | tablename: test
2020-03-01 at 13:39:17 | DEBUG | filter: id=:pid
2020-03-01 at 13:39:17 | DEBUG | filterparam: {'pid':462}
2020-03-01 at 13:39:17 | DEBUG | fieldvalue: {'name':'anewname','phone':'54321'}
2020-03-01 at 13:39:17 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:17 | DEBUG | metadata exists ....
2020-03-01 at 13:39:17 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:17 | DEBUG | Update Values: [ {'name': 'anewname', 'phone': '54321'} ]
2020-03-01 at 13:39:17 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s, phone=%(phone)s WHERE id=%(pid)s ]
2020-03-01 at 13:39:17 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000021091323FD0> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "udpate_rowcount":1
} 
2020-03-01 at 13:39:17 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:17 | INFO | DELETE table [test] : 
2020-03-01 at 13:39:17 | INFO | DELETE uri : [ http://192.168.10.158:3000/api/v2/_table/test ]
2020-03-01 at 13:39:17 | DEBUG | Access '/_table/{table_name}' : run in delete_data(), input data table_name: [test]
2020-03-01 at 13:39:17 | DEBUG | filter: [id=:delid]
2020-03-01 at 13:39:17 | DEBUG | filterparam: [{'delid':462}]
2020-03-01 at 13:39:17 | DEBUG | delete_table():
2020-03-01 at 13:39:17 | DEBUG | tablename: test
2020-03-01 at 13:39:17 | DEBUG | filter: id=:delid
2020-03-01 at 13:39:17 | DEBUG | filterparam: {'delid':462}
2020-03-01 at 13:39:17 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:17 | DEBUG | metadata exists ....
2020-03-01 at 13:39:17 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:17 | DEBUG | SQL of Delete: [ DELETE FROM test ]
2020-03-01 at 13:39:17 | DEBUG | Delete Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x000002109131DB20> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "delet_rowcount":1
} 
2020-03-01 at 13:39:17 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:17 | INFO | POST table [test] : 
2020-03-01 at 13:39:17 | INFO | Post body: 
 {
    "fieldvalue":"{'name':'ntestname','phone':'phonnum-123'}",
    "idfield":"id"
} 
2020-03-01 at 13:39:17 | INFO | POST uri : [ http://192.168.10.158:3000/api/v2/_table/test ]
2020-03-01 at 13:39:17 | DEBUG | Access '/_table/{table_name}' : run in post_data(), input data table_name: [test]
2020-03-01 at 13:39:17 | DEBUG | body: [fieldvalue="{'name':'ntestname','phone':'phonnum-123'}" idfield='id']
2020-03-01 at 13:39:17 | DEBUG | post_table():
2020-03-01 at 13:39:17 | DEBUG | tablename: test
2020-03-01 at 13:39:17 | DEBUG | idfiled: id
2020-03-01 at 13:39:17 | DEBUG | fieldvalue: {'name':'ntestname','phone':'phonnum-123'}
2020-03-01 at 13:39:17 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:17 | DEBUG | metadata exists ....
2020-03-01 at 13:39:17 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:17 | DEBUG | SQL of Insert: [ INSERT INTO test (id, name, phone) VALUES (%(id)s, %(name)s, %(phone)s) ]
2020-03-01 at 13:39:17 | DEBUG | Insert Values: [ {'name': 'ntestname', 'phone': 'phonnum-123'} ]
2020-03-01 at 13:39:17 | DEBUG | Insert Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000210911ED700> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "insert_row_id":463
} 
2020-03-01 at 13:39:17 | INFO | Insert ID: 
 463 
2020-03-01 at 13:39:17 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:17 | INFO | PUT table by id [test] : 
2020-03-01 at 13:39:17 | INFO | Put body: 
 {
    "idfield":"id",
    "fieldvalue":"{'name':'anewname','phone':'54321'}"
} 
2020-03-01 at 13:39:17 | INFO | PUT uri : [ http://192.168.10.158:3000/api/v2/_table/test/463 ]
2020-03-01 at 13:39:17 | DEBUG | Access '/_table/{table_name}/{id}' : run in put_data_by_id(), input data table_name: [test]
2020-03-01 at 13:39:17 | DEBUG | body: [fieldvalue="{'name':'anewname','phone':'54321'}" idfield='id']
2020-03-01 at 13:39:17 | DEBUG | put_table_by_id():
2020-03-01 at 13:39:17 | DEBUG | tablename: test
2020-03-01 at 13:39:17 | DEBUG | idfiled: id
2020-03-01 at 13:39:17 | DEBUG | idvalue: 463
2020-03-01 at 13:39:17 | DEBUG | fieldvalue: {'name':'anewname','phone':'54321'}
2020-03-01 at 13:39:17 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:17 | DEBUG | metadata exists ....
2020-03-01 at 13:39:17 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:17 | DEBUG | Primarykey select string : [ id=:up_b_id ]
2020-03-01 at 13:39:17 | DEBUG | Primarykey select param : [ {'up_b_id': 463} ]
2020-03-01 at 13:39:17 | DEBUG | SQL of Update: [ UPDATE test SET name=%(name)s, phone=%(phone)s WHERE id=%(up_b_id)s ]
2020-03-01 at 13:39:17 | DEBUG | Update Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x00000210911AF430> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "udpate_rowcount":1
} 
2020-03-01 at 13:39:17 | INFO | = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2020-03-01 at 13:39:17 | INFO | DELETE table by id [test] : 
2020-03-01 at 13:39:17 | INFO | DELETE uri : [ http://192.168.10.158:3000/api/v2/_table/test/463 ]
2020-03-01 at 13:39:17 | DEBUG | Access '/_table/{table_name}/{id}' : run in delete_data_by_id(), input data table_name: [test]
2020-03-01 at 13:39:17 | DEBUG | id: [463]
2020-03-01 at 13:39:17 | DEBUG | idfield: [None]
2020-03-01 at 13:39:17 | DEBUG | delete_table_by_id():
2020-03-01 at 13:39:17 | DEBUG | tablename: test
2020-03-01 at 13:39:17 | DEBUG | idfiled: None
2020-03-01 at 13:39:17 | DEBUG | idvalue: 463
2020-03-01 at 13:39:17 | DEBUG | MetaData(bind=Engine(mysql+pymysql://root:***@192.168.10.15:23306/acmondb))
2020-03-01 at 13:39:17 | DEBUG | metadata exists ....
2020-03-01 at 13:39:17 | DEBUG | Table Columns: ['test.id', 'test.name', 'test.phone']
2020-03-01 at 13:39:17 | DEBUG | Primarykey select string : [ id=:id ]
2020-03-01 at 13:39:17 | DEBUG | Primarykey select param : [ {'id': 463} ]
2020-03-01 at 13:39:17 | DEBUG | SQL of Delete: [ DELETE FROM test ]
2020-03-01 at 13:39:17 | DEBUG | Delete Result: [ <sqlalchemy.engine.result.ResultProxy object at 0x0000021091396310> ]
2020-03-01 at 13:39:17 | INFO | * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
2020-03-01 at 13:39:17 | INFO | Status Code: [ 200 ]
2020-03-01 at 13:39:17 | INFO | Response: 
 {
    "delet_rowcount":1
} 
